import { NextRequest, NextResponse } from 'next/server';
import { config } from '@/lib/config';

// ‚ö†Ô∏è ENDPOINT DE DIAGN√ìSTICO TEMPORAL - ELIMINAR EN PRODUCCI√ìN
// Solo para diagnosticar problemas de variables de entorno

export async function GET(request: NextRequest) {
  console.log('üîç [debug-env] Iniciando diagn√≥stico de variables de entorno');
  
  try {
    // Verificar variables cr√≠ticas (sin exponer valores sensibles)
    const envCheck = {
      NODE_ENV: process.env.NODE_ENV,
      // Airtable - solo verificar si existen
      AIRTABLE_TOKEN: process.env.AIRTABLE_TOKEN ? '‚úÖ Configurado' : '‚ùå Faltante',
      AIRTABLE_BASE_ID: process.env.AIRTABLE_BASE_ID ? '‚úÖ Configurado' : '‚ùå Faltante',
      AIRTABLE_TABLE_NAME: process.env.AIRTABLE_TABLE_NAME ? `‚úÖ ${process.env.AIRTABLE_TABLE_NAME}` : '‚ùå Faltante',
      
      // Verificar otras tablas cr√≠ticas
      AIRTABLE_USUARIOS_TABLE_ID: process.env.AIRTABLE_USUARIOS_TABLE_ID ? '‚úÖ Configurado' : '‚ùå Faltante',
      AIRTABLE_TURNOS_TABLE_ID: process.env.AIRTABLE_TURNOS_TABLE_ID ? '‚úÖ Configurado' : '‚ùå Faltante',
      AIRTABLE_BALANCE_MASA_TABLE: process.env.AIRTABLE_BALANCE_MASA_TABLE ? '‚úÖ Configurado' : '‚ùå Faltante',
      
      // AWS S3 - cr√≠tico para PDF y QR
      AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID ? '‚úÖ Configurado' : '‚ùå Faltante',
      AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY ? '‚úÖ Configurado' : '‚ùå Faltante',
      AWS_REGION: process.env.AWS_REGION ? `‚úÖ ${process.env.AWS_REGION}` : '‚ùå Faltante (usando us-east-1)',
      
      // URL Configuration
      NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL ? `‚úÖ ${process.env.NEXT_PUBLIC_APP_URL}` : '‚ùå Faltante',
      VERCEL_URL: process.env.VERCEL_URL ? `‚úÖ ${process.env.VERCEL_URL}` : '‚ùå Faltante',
      
      // Config object values
      configAirtableToken: config.airtable.token ? '‚úÖ Configurado en config' : '‚ùå Faltante en config',
      configAirtableBaseId: config.airtable.baseId ? '‚úÖ Configurado en config' : '‚ùå Faltante en config',
      configAirtableTableName: config.airtable.tableName ? `‚úÖ ${config.airtable.tableName}` : '‚ùå Faltante en config',
    };

    // Informaci√≥n del sistema
    const systemInfo = {
      nodeVersion: process.version,
      platform: process.platform,
      timestamp: new Date().toISOString(),
      envKeys: Object.keys(process.env).filter(key => key.startsWith('AIRTABLE_')).length + ' variables AIRTABLE_*'
    };

    console.log('üìä [debug-env] Variables de entorno:', envCheck);
    console.log('üñ•Ô∏è [debug-env] Informaci√≥n del sistema:', systemInfo);

    return NextResponse.json({
      status: 'success',
      environment: envCheck,
      system: systemInfo,
      message: 'Diagn√≥stico completado. Revisa los logs del servidor para m√°s detalles.'
    });

  } catch (error) {
    console.error('üí• [debug-env] Error en diagn√≥stico:', error);
    
    return NextResponse.json({
      status: 'error',
      error: error instanceof Error ? error.message : 'Error desconocido',
      message: 'Error durante el diagn√≥stico'
    }, { status: 500 });
  }
}

// ‚ö†Ô∏è IMPORTANTE: Este endpoint debe ser eliminado antes del deploy final
// Solo es para diagn√≥stico temporal